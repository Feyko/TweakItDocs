// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: internal/translate/proto.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packages []*Package `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{0}
}

func (x *Data) GetPackages() []*Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportRecord *Package_Record   `protobuf:"bytes,1,opt,name=export_record,json=exportRecord,proto3" json:"export_record,omitempty"`
	Summary      *Package_Summary  `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	Exports      []*Package_Export `protobuf:"bytes,3,rep,name=exports,proto3" json:"exports,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1}
}

func (x *Package) GetExportRecord() *Package_Record {
	if x != nil {
		return x.ExportRecord
	}
	return nil
}

func (x *Package) GetSummary() *Package_Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *Package) GetExports() []*Package_Export {
	if x != nil {
		return x.Exports
	}
	return nil
}

type Package_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName             string            `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileOffset           int64             `protobuf:"varint,2,opt,name=file_offset,json=fileOffset,proto3" json:"file_offset,omitempty"`
	FileSize             int64             `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	UncompressedSize     int64             `protobuf:"varint,4,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	CompressionMethod    int64             `protobuf:"varint,5,opt,name=compression_method,json=compressionMethod,proto3" json:"compression_method,omitempty"`
	Timestamp            int64             `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DataSha_1Hash        int64             `protobuf:"varint,7,opt,name=data_sha_1_hash,json=dataSha1Hash,proto3" json:"data_sha_1_hash,omitempty"`
	CompressionBlocks    []*structpb.Value `protobuf:"bytes,8,rep,name=compression_blocks,json=compressionBlocks,proto3" json:"compression_blocks,omitempty"`
	IsEncrypted          bool              `protobuf:"varint,9,opt,name=is_encrypted,json=isEncrypted,proto3" json:"is_encrypted,omitempty"`
	CompressionBlockSize int64             `protobuf:"varint,10,opt,name=compression_block_size,json=compressionBlockSize,proto3" json:"compression_block_size,omitempty"`
}

func (x *Package_Record) Reset() {
	*x = Package_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Record) ProtoMessage() {}

func (x *Package_Record) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Record.ProtoReflect.Descriptor instead.
func (*Package_Record) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Package_Record) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Package_Record) GetFileOffset() int64 {
	if x != nil {
		return x.FileOffset
	}
	return 0
}

func (x *Package_Record) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *Package_Record) GetUncompressedSize() int64 {
	if x != nil {
		return x.UncompressedSize
	}
	return 0
}

func (x *Package_Record) GetCompressionMethod() int64 {
	if x != nil {
		return x.CompressionMethod
	}
	return 0
}

func (x *Package_Record) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Package_Record) GetDataSha_1Hash() int64 {
	if x != nil {
		return x.DataSha_1Hash
	}
	return 0
}

func (x *Package_Record) GetCompressionBlocks() []*structpb.Value {
	if x != nil {
		return x.CompressionBlocks
	}
	return nil
}

func (x *Package_Record) GetIsEncrypted() bool {
	if x != nil {
		return x.IsEncrypted
	}
	return false
}

func (x *Package_Record) GetCompressionBlockSize() int64 {
	if x != nil {
		return x.CompressionBlockSize
	}
	return 0
}

type Package_Guid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A int64 `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B int64 `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	C int64 `protobuf:"varint,3,opt,name=c,proto3" json:"c,omitempty"`
	D int64 `protobuf:"varint,4,opt,name=d,proto3" json:"d,omitempty"`
}

func (x *Package_Guid) Reset() {
	*x = Package_Guid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Guid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Guid) ProtoMessage() {}

func (x *Package_Guid) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Guid.ProtoReflect.Descriptor instead.
func (*Package_Guid) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Package_Guid) GetA() int64 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *Package_Guid) GetB() int64 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *Package_Guid) GetC() int64 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *Package_Guid) GetD() int64 {
	if x != nil {
		return x.D
	}
	return 0
}

type Package_Generation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportCount int64 `protobuf:"varint,1,opt,name=export_count,json=exportCount,proto3" json:"export_count,omitempty"`
	NameCount   int64 `protobuf:"varint,2,opt,name=name_count,json=nameCount,proto3" json:"name_count,omitempty"`
}

func (x *Package_Generation) Reset() {
	*x = Package_Generation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Generation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Generation) ProtoMessage() {}

func (x *Package_Generation) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Generation.ProtoReflect.Descriptor instead.
func (*Package_Generation) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Package_Generation) GetExportCount() int64 {
	if x != nil {
		return x.ExportCount
	}
	return 0
}

func (x *Package_Generation) GetNameCount() int64 {
	if x != nil {
		return x.NameCount
	}
	return 0
}

type Package_Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major      int64  `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor      int64  `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch      int64  `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
	ChangeList int64  `protobuf:"varint,4,opt,name=change_list,json=changeList,proto3" json:"change_list,omitempty"`
	Branch     string `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *Package_Version) Reset() {
	*x = Package_Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Version) ProtoMessage() {}

func (x *Package_Version) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Version.ProtoReflect.Descriptor instead.
func (*Package_Version) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Package_Version) GetMajor() int64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *Package_Version) GetMinor() int64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *Package_Version) GetPatch() int64 {
	if x != nil {
		return x.Patch
	}
	return 0
}

func (x *Package_Version) GetChangeList() int64 {
	if x != nil {
		return x.ChangeList
	}
	return 0
}

func (x *Package_Version) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type Package_Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NonCasePreservingHash int64  `protobuf:"varint,2,opt,name=non_case_preserving_hash,json=nonCasePreservingHash,proto3" json:"non_case_preserving_hash,omitempty"`
	CasePreservingHash    int64  `protobuf:"varint,3,opt,name=case_preserving_hash,json=casePreservingHash,proto3" json:"case_preserving_hash,omitempty"`
}

func (x *Package_Name) Reset() {
	*x = Package_Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Name) ProtoMessage() {}

func (x *Package_Name) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Name.ProtoReflect.Descriptor instead.
func (*Package_Name) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Package_Name) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package_Name) GetNonCasePreservingHash() int64 {
	if x != nil {
		return x.NonCasePreservingHash
	}
	return 0
}

func (x *Package_Name) GetCasePreservingHash() int64 {
	if x != nil {
		return x.CasePreservingHash
	}
	return 0
}

type Package_Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassPackage string                `protobuf:"bytes,1,opt,name=class_package,json=classPackage,proto3" json:"class_package,omitempty"`
	ClassName    string                `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	OuterIndex   int64                 `protobuf:"varint,3,opt,name=outer_index,json=outerIndex,proto3" json:"outer_index,omitempty"`
	ObjectName   string                `protobuf:"bytes,4,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	OuterPackage *Package_PackageIndex `protobuf:"bytes,5,opt,name=outer_package,json=outerPackage,proto3" json:"outer_package,omitempty"`
}

func (x *Package_Reference) Reset() {
	*x = Package_Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Reference) ProtoMessage() {}

func (x *Package_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Reference.ProtoReflect.Descriptor instead.
func (*Package_Reference) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 5}
}

func (x *Package_Reference) GetClassPackage() string {
	if x != nil {
		return x.ClassPackage
	}
	return ""
}

func (x *Package_Reference) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Package_Reference) GetOuterIndex() int64 {
	if x != nil {
		return x.OuterIndex
	}
	return 0
}

func (x *Package_Reference) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *Package_Reference) GetOuterPackage() *Package_PackageIndex {
	if x != nil {
		return x.OuterPackage
	}
	return nil
}

type Package_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Types that are assignable to OptReference:
	//	*Package_Index_NormReference
	//	*Package_Index_ObjectReference
	//	*Package_Index_Reference
	OptReference isPackage_Index_OptReference `protobuf_oneof:"opt_reference"`
}

func (x *Package_Index) Reset() {
	*x = Package_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Index) ProtoMessage() {}

func (x *Package_Index) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Index.ProtoReflect.Descriptor instead.
func (*Package_Index) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 6}
}

func (x *Package_Index) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (m *Package_Index) GetOptReference() isPackage_Index_OptReference {
	if m != nil {
		return m.OptReference
	}
	return nil
}

func (x *Package_Index) GetNormReference() *Package_Reference {
	if x, ok := x.GetOptReference().(*Package_Index_NormReference); ok {
		return x.NormReference
	}
	return nil
}

func (x *Package_Index) GetObjectReference() *Package_ExportInfo {
	if x, ok := x.GetOptReference().(*Package_Index_ObjectReference); ok {
		return x.ObjectReference
	}
	return nil
}

func (x *Package_Index) GetReference() *structpb.Value {
	if x, ok := x.GetOptReference().(*Package_Index_Reference); ok {
		return x.Reference
	}
	return nil
}

type isPackage_Index_OptReference interface {
	isPackage_Index_OptReference()
}

type Package_Index_NormReference struct {
	NormReference *Package_Reference `protobuf:"bytes,2,opt,name=norm_reference,json=normReference,proto3,oneof"`
}

type Package_Index_ObjectReference struct {
	ObjectReference *Package_ExportInfo `protobuf:"bytes,3,opt,name=object_reference,json=objectReference,proto3,oneof"`
}

type Package_Index_Reference struct {
	Reference *structpb.Value `protobuf:"bytes,4,opt,name=reference,proto3,oneof"`
}

func (*Package_Index_NormReference) isPackage_Index_OptReference() {}

func (*Package_Index_ObjectReference) isPackage_Index_OptReference() {}

func (*Package_Index_Reference) isPackage_Index_OptReference() {}

type Package_PackageIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     int64              `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Reference *Package_Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
}

func (x *Package_PackageIndex) Reset() {
	*x = Package_PackageIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_PackageIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_PackageIndex) ProtoMessage() {}

func (x *Package_PackageIndex) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_PackageIndex.ProtoReflect.Descriptor instead.
func (*Package_PackageIndex) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 7}
}

func (x *Package_PackageIndex) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Package_PackageIndex) GetReference() *Package_Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

type Package_Import struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassPackage string                `protobuf:"bytes,1,opt,name=class_package,json=classPackage,proto3" json:"class_package,omitempty"`
	ClassName    string                `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	OuterIndex   int64                 `protobuf:"varint,3,opt,name=outer_index,json=outerIndex,proto3" json:"outer_index,omitempty"`
	ObjectName   string                `protobuf:"bytes,4,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	OuterPackage *Package_PackageIndex `protobuf:"bytes,5,opt,name=outer_package,json=outerPackage,proto3" json:"outer_package,omitempty"`
}

func (x *Package_Import) Reset() {
	*x = Package_Import{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Import) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Import) ProtoMessage() {}

func (x *Package_Import) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Import.ProtoReflect.Descriptor instead.
func (*Package_Import) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 8}
}

func (x *Package_Import) GetClassPackage() string {
	if x != nil {
		return x.ClassPackage
	}
	return ""
}

func (x *Package_Import) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Package_Import) GetOuterIndex() int64 {
	if x != nil {
		return x.OuterIndex
	}
	return 0
}

func (x *Package_Import) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *Package_Import) GetOuterPackage() *Package_PackageIndex {
	if x != nil {
		return x.OuterPackage
	}
	return nil
}

type Package_ExportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassIndex                                   *Package_Index `protobuf:"bytes,1,opt,name=class_index,json=classIndex,proto3" json:"class_index,omitempty"`
	SuperIndex                                   *Package_Index `protobuf:"bytes,2,opt,name=super_index,json=superIndex,proto3" json:"super_index,omitempty"`
	TemplateIndex                                *Package_Index `protobuf:"bytes,3,opt,name=template_index,json=templateIndex,proto3" json:"template_index,omitempty"`
	OuterIndex                                   *Package_Index `protobuf:"bytes,4,opt,name=outer_index,json=outerIndex,proto3" json:"outer_index,omitempty"`
	ObjectName                                   string         `protobuf:"bytes,5,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	Save                                         int64          `protobuf:"varint,6,opt,name=save,proto3" json:"save,omitempty"`
	SerialSize                                   int64          `protobuf:"varint,7,opt,name=serial_size,json=serialSize,proto3" json:"serial_size,omitempty"`
	SerialOffset                                 int64          `protobuf:"varint,8,opt,name=serial_offset,json=serialOffset,proto3" json:"serial_offset,omitempty"`
	ForcedExport                                 bool           `protobuf:"varint,9,opt,name=forced_export,json=forcedExport,proto3" json:"forced_export,omitempty"`
	NotForClient                                 bool           `protobuf:"varint,10,opt,name=not_for_client,json=notForClient,proto3" json:"not_for_client,omitempty"`
	NotForServer                                 bool           `protobuf:"varint,11,opt,name=not_for_server,json=notForServer,proto3" json:"not_for_server,omitempty"`
	PackageGuid                                  *Package_Guid  `protobuf:"bytes,12,opt,name=package_guid,json=packageGuid,proto3" json:"package_guid,omitempty"`
	PackageFlags                                 int64          `protobuf:"varint,13,opt,name=package_flags,json=packageFlags,proto3" json:"package_flags,omitempty"`
	NotAlwaysLoadedForEditorGame                 bool           `protobuf:"varint,14,opt,name=not_always_loaded_for_editor_game,json=notAlwaysLoadedForEditorGame,proto3" json:"not_always_loaded_for_editor_game,omitempty"`
	IsAsset                                      bool           `protobuf:"varint,15,opt,name=is_asset,json=isAsset,proto3" json:"is_asset,omitempty"`
	FirstExportDependency                        int64          `protobuf:"varint,16,opt,name=first_export_dependency,json=firstExportDependency,proto3" json:"first_export_dependency,omitempty"`
	SerializationBeforeSerializationDependencies bool           `protobuf:"varint,17,opt,name=serialization_before_serialization_dependencies,json=serializationBeforeSerializationDependencies,proto3" json:"serialization_before_serialization_dependencies,omitempty"`
	CreateBeforeSerializationDependencies        bool           `protobuf:"varint,18,opt,name=create_before_serialization_dependencies,json=createBeforeSerializationDependencies,proto3" json:"create_before_serialization_dependencies,omitempty"`
	SerializationBeforeCreateDependencies        bool           `protobuf:"varint,19,opt,name=serialization_before_create_dependencies,json=serializationBeforeCreateDependencies,proto3" json:"serialization_before_create_dependencies,omitempty"`
	CreateBeforeCreateDependencies               bool           `protobuf:"varint,20,opt,name=create_before_create_dependencies,json=createBeforeCreateDependencies,proto3" json:"create_before_create_dependencies,omitempty"`
}

func (x *Package_ExportInfo) Reset() {
	*x = Package_ExportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_ExportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_ExportInfo) ProtoMessage() {}

func (x *Package_ExportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_ExportInfo.ProtoReflect.Descriptor instead.
func (*Package_ExportInfo) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 9}
}

func (x *Package_ExportInfo) GetClassIndex() *Package_Index {
	if x != nil {
		return x.ClassIndex
	}
	return nil
}

func (x *Package_ExportInfo) GetSuperIndex() *Package_Index {
	if x != nil {
		return x.SuperIndex
	}
	return nil
}

func (x *Package_ExportInfo) GetTemplateIndex() *Package_Index {
	if x != nil {
		return x.TemplateIndex
	}
	return nil
}

func (x *Package_ExportInfo) GetOuterIndex() *Package_Index {
	if x != nil {
		return x.OuterIndex
	}
	return nil
}

func (x *Package_ExportInfo) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *Package_ExportInfo) GetSave() int64 {
	if x != nil {
		return x.Save
	}
	return 0
}

func (x *Package_ExportInfo) GetSerialSize() int64 {
	if x != nil {
		return x.SerialSize
	}
	return 0
}

func (x *Package_ExportInfo) GetSerialOffset() int64 {
	if x != nil {
		return x.SerialOffset
	}
	return 0
}

func (x *Package_ExportInfo) GetForcedExport() bool {
	if x != nil {
		return x.ForcedExport
	}
	return false
}

func (x *Package_ExportInfo) GetNotForClient() bool {
	if x != nil {
		return x.NotForClient
	}
	return false
}

func (x *Package_ExportInfo) GetNotForServer() bool {
	if x != nil {
		return x.NotForServer
	}
	return false
}

func (x *Package_ExportInfo) GetPackageGuid() *Package_Guid {
	if x != nil {
		return x.PackageGuid
	}
	return nil
}

func (x *Package_ExportInfo) GetPackageFlags() int64 {
	if x != nil {
		return x.PackageFlags
	}
	return 0
}

func (x *Package_ExportInfo) GetNotAlwaysLoadedForEditorGame() bool {
	if x != nil {
		return x.NotAlwaysLoadedForEditorGame
	}
	return false
}

func (x *Package_ExportInfo) GetIsAsset() bool {
	if x != nil {
		return x.IsAsset
	}
	return false
}

func (x *Package_ExportInfo) GetFirstExportDependency() int64 {
	if x != nil {
		return x.FirstExportDependency
	}
	return 0
}

func (x *Package_ExportInfo) GetSerializationBeforeSerializationDependencies() bool {
	if x != nil {
		return x.SerializationBeforeSerializationDependencies
	}
	return false
}

func (x *Package_ExportInfo) GetCreateBeforeSerializationDependencies() bool {
	if x != nil {
		return x.CreateBeforeSerializationDependencies
	}
	return false
}

func (x *Package_ExportInfo) GetSerializationBeforeCreateDependencies() bool {
	if x != nil {
		return x.SerializationBeforeCreateDependencies
	}
	return false
}

func (x *Package_ExportInfo) GetCreateBeforeCreateDependencies() bool {
	if x != nil {
		return x.CreateBeforeCreateDependencies
	}
	return false
}

type Package_Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record                      *Package_Record       `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	Tag                         int64                 `protobuf:"varint,2,opt,name=tag,proto3" json:"tag,omitempty"`
	LegacyFileVersion           int64                 `protobuf:"varint,3,opt,name=legacy_file_version,json=legacyFileVersion,proto3" json:"legacy_file_version,omitempty"`
	LegacyUe_3Version           int64                 `protobuf:"varint,4,opt,name=legacy_ue_3_version,json=legacyUe3Version,proto3" json:"legacy_ue_3_version,omitempty"`
	FileVersionUe_4             int64                 `protobuf:"varint,5,opt,name=file_version_ue_4,json=fileVersionUe4,proto3" json:"file_version_ue_4,omitempty"`
	FileVersionLicenseeUe_4     int64                 `protobuf:"varint,6,opt,name=file_version_licensee_ue_4,json=fileVersionLicenseeUe4,proto3" json:"file_version_licensee_ue_4,omitempty"`
	TotalHeaderSize             int64                 `protobuf:"varint,7,opt,name=total_header_size,json=totalHeaderSize,proto3" json:"total_header_size,omitempty"`
	FolderName                  string                `protobuf:"bytes,8,opt,name=folder_name,json=folderName,proto3" json:"folder_name,omitempty"`
	PackageFlags                int64                 `protobuf:"varint,9,opt,name=package_flags,json=packageFlags,proto3" json:"package_flags,omitempty"`
	NameOffset                  int64                 `protobuf:"varint,10,opt,name=name_offset,json=nameOffset,proto3" json:"name_offset,omitempty"`
	GatherableTextDataCount     int64                 `protobuf:"varint,11,opt,name=gatherable_text_data_count,json=gatherableTextDataCount,proto3" json:"gatherable_text_data_count,omitempty"`
	GatherableTextDataOffset    int64                 `protobuf:"varint,12,opt,name=gatherable_text_data_offset,json=gatherableTextDataOffset,proto3" json:"gatherable_text_data_offset,omitempty"`
	ExportOffset                int64                 `protobuf:"varint,13,opt,name=export_offset,json=exportOffset,proto3" json:"export_offset,omitempty"`
	ImportOffset                int64                 `protobuf:"varint,14,opt,name=import_offset,json=importOffset,proto3" json:"import_offset,omitempty"`
	DependsOffset               int64                 `protobuf:"varint,15,opt,name=depends_offset,json=dependsOffset,proto3" json:"depends_offset,omitempty"`
	StringAssetReferencesCount  int64                 `protobuf:"varint,16,opt,name=string_asset_references_count,json=stringAssetReferencesCount,proto3" json:"string_asset_references_count,omitempty"`
	StringAssetReferencesOffset int64                 `protobuf:"varint,17,opt,name=string_asset_references_offset,json=stringAssetReferencesOffset,proto3" json:"string_asset_references_offset,omitempty"`
	SearchableNamesOffset       int64                 `protobuf:"varint,18,opt,name=searchable_names_offset,json=searchableNamesOffset,proto3" json:"searchable_names_offset,omitempty"`
	ThumbnailTableOffset        int64                 `protobuf:"varint,19,opt,name=thumbnail_table_offset,json=thumbnailTableOffset,proto3" json:"thumbnail_table_offset,omitempty"`
	Guid                        *Package_Guid         `protobuf:"bytes,20,opt,name=guid,proto3" json:"guid,omitempty"`
	Generations                 []*Package_Generation `protobuf:"bytes,21,rep,name=generations,proto3" json:"generations,omitempty"`
	SavedByEngineVersion        *Package_Version      `protobuf:"bytes,22,opt,name=saved_by_engine_version,json=savedByEngineVersion,proto3" json:"saved_by_engine_version,omitempty"`
	CompatibleWithEngineVersion *Package_Version      `protobuf:"bytes,23,opt,name=compatible_with_engine_version,json=compatibleWithEngineVersion,proto3" json:"compatible_with_engine_version,omitempty"`
	CompressionFlags            int64                 `protobuf:"varint,24,opt,name=compression_flags,json=compressionFlags,proto3" json:"compression_flags,omitempty"`
	CompressedChunks            []*structpb.Value     `protobuf:"bytes,25,rep,name=compressed_chunks,json=compressedChunks,proto3" json:"compressed_chunks,omitempty"`
	PackageSource               int64                 `protobuf:"varint,26,opt,name=package_source,json=packageSource,proto3" json:"package_source,omitempty"`
	AdditionalPackagesToCook    []*structpb.Value     `protobuf:"bytes,27,rep,name=additional_packages_to_cook,json=additionalPackagesToCook,proto3" json:"additional_packages_to_cook,omitempty"`
	AssetRegistryDataOffset     int64                 `protobuf:"varint,28,opt,name=asset_registry_data_offset,json=assetRegistryDataOffset,proto3" json:"asset_registry_data_offset,omitempty"`
	BulkDataStartOffset         int64                 `protobuf:"varint,29,opt,name=bulk_data_start_offset,json=bulkDataStartOffset,proto3" json:"bulk_data_start_offset,omitempty"`
	WorldTileInfoDataOffset     int64                 `protobuf:"varint,30,opt,name=world_tile_info_data_offset,json=worldTileInfoDataOffset,proto3" json:"world_tile_info_data_offset,omitempty"`
	ChunkIds                    []*structpb.Value     `protobuf:"bytes,31,rep,name=chunk_ids,json=chunkIds,proto3" json:"chunk_ids,omitempty"`
	PreloadDependencyCount      int64                 `protobuf:"varint,32,opt,name=preload_dependency_count,json=preloadDependencyCount,proto3" json:"preload_dependency_count,omitempty"`
	PreloadDependencyOffset     int64                 `protobuf:"varint,33,opt,name=preload_dependency_offset,json=preloadDependencyOffset,proto3" json:"preload_dependency_offset,omitempty"`
	Names                       []*Package_Name       `protobuf:"bytes,34,rep,name=names,proto3" json:"names,omitempty"`
	Imports                     []*Package_Import     `protobuf:"bytes,35,rep,name=imports,proto3" json:"imports,omitempty"`
	Exports                     []*Package_ExportInfo `protobuf:"bytes,36,rep,name=exports,proto3" json:"exports,omitempty"`
}

func (x *Package_Summary) Reset() {
	*x = Package_Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Summary) ProtoMessage() {}

func (x *Package_Summary) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Summary.ProtoReflect.Descriptor instead.
func (*Package_Summary) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 10}
}

func (x *Package_Summary) GetRecord() *Package_Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *Package_Summary) GetTag() int64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *Package_Summary) GetLegacyFileVersion() int64 {
	if x != nil {
		return x.LegacyFileVersion
	}
	return 0
}

func (x *Package_Summary) GetLegacyUe_3Version() int64 {
	if x != nil {
		return x.LegacyUe_3Version
	}
	return 0
}

func (x *Package_Summary) GetFileVersionUe_4() int64 {
	if x != nil {
		return x.FileVersionUe_4
	}
	return 0
}

func (x *Package_Summary) GetFileVersionLicenseeUe_4() int64 {
	if x != nil {
		return x.FileVersionLicenseeUe_4
	}
	return 0
}

func (x *Package_Summary) GetTotalHeaderSize() int64 {
	if x != nil {
		return x.TotalHeaderSize
	}
	return 0
}

func (x *Package_Summary) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

func (x *Package_Summary) GetPackageFlags() int64 {
	if x != nil {
		return x.PackageFlags
	}
	return 0
}

func (x *Package_Summary) GetNameOffset() int64 {
	if x != nil {
		return x.NameOffset
	}
	return 0
}

func (x *Package_Summary) GetGatherableTextDataCount() int64 {
	if x != nil {
		return x.GatherableTextDataCount
	}
	return 0
}

func (x *Package_Summary) GetGatherableTextDataOffset() int64 {
	if x != nil {
		return x.GatherableTextDataOffset
	}
	return 0
}

func (x *Package_Summary) GetExportOffset() int64 {
	if x != nil {
		return x.ExportOffset
	}
	return 0
}

func (x *Package_Summary) GetImportOffset() int64 {
	if x != nil {
		return x.ImportOffset
	}
	return 0
}

func (x *Package_Summary) GetDependsOffset() int64 {
	if x != nil {
		return x.DependsOffset
	}
	return 0
}

func (x *Package_Summary) GetStringAssetReferencesCount() int64 {
	if x != nil {
		return x.StringAssetReferencesCount
	}
	return 0
}

func (x *Package_Summary) GetStringAssetReferencesOffset() int64 {
	if x != nil {
		return x.StringAssetReferencesOffset
	}
	return 0
}

func (x *Package_Summary) GetSearchableNamesOffset() int64 {
	if x != nil {
		return x.SearchableNamesOffset
	}
	return 0
}

func (x *Package_Summary) GetThumbnailTableOffset() int64 {
	if x != nil {
		return x.ThumbnailTableOffset
	}
	return 0
}

func (x *Package_Summary) GetGuid() *Package_Guid {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *Package_Summary) GetGenerations() []*Package_Generation {
	if x != nil {
		return x.Generations
	}
	return nil
}

func (x *Package_Summary) GetSavedByEngineVersion() *Package_Version {
	if x != nil {
		return x.SavedByEngineVersion
	}
	return nil
}

func (x *Package_Summary) GetCompatibleWithEngineVersion() *Package_Version {
	if x != nil {
		return x.CompatibleWithEngineVersion
	}
	return nil
}

func (x *Package_Summary) GetCompressionFlags() int64 {
	if x != nil {
		return x.CompressionFlags
	}
	return 0
}

func (x *Package_Summary) GetCompressedChunks() []*structpb.Value {
	if x != nil {
		return x.CompressedChunks
	}
	return nil
}

func (x *Package_Summary) GetPackageSource() int64 {
	if x != nil {
		return x.PackageSource
	}
	return 0
}

func (x *Package_Summary) GetAdditionalPackagesToCook() []*structpb.Value {
	if x != nil {
		return x.AdditionalPackagesToCook
	}
	return nil
}

func (x *Package_Summary) GetAssetRegistryDataOffset() int64 {
	if x != nil {
		return x.AssetRegistryDataOffset
	}
	return 0
}

func (x *Package_Summary) GetBulkDataStartOffset() int64 {
	if x != nil {
		return x.BulkDataStartOffset
	}
	return 0
}

func (x *Package_Summary) GetWorldTileInfoDataOffset() int64 {
	if x != nil {
		return x.WorldTileInfoDataOffset
	}
	return 0
}

func (x *Package_Summary) GetChunkIds() []*structpb.Value {
	if x != nil {
		return x.ChunkIds
	}
	return nil
}

func (x *Package_Summary) GetPreloadDependencyCount() int64 {
	if x != nil {
		return x.PreloadDependencyCount
	}
	return 0
}

func (x *Package_Summary) GetPreloadDependencyOffset() int64 {
	if x != nil {
		return x.PreloadDependencyOffset
	}
	return 0
}

func (x *Package_Summary) GetNames() []*Package_Name {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Package_Summary) GetImports() []*Package_Import {
	if x != nil {
		return x.Imports
	}
	return nil
}

func (x *Package_Summary) GetExports() []*Package_ExportInfo {
	if x != nil {
		return x.Exports
	}
	return nil
}

type Package_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PropertyType string          `protobuf:"bytes,2,opt,name=property_type,json=propertyType,proto3" json:"property_type,omitempty"`
	TagData      *structpb.Value `protobuf:"bytes,3,opt,name=tag_data,json=tagData,proto3" json:"tag_data,omitempty"`
	Size         int64           `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	ArrayIndex   int64           `protobuf:"varint,5,opt,name=array_index,json=arrayIndex,proto3" json:"array_index,omitempty"`
	PropertyGuid *Package_Guid   `protobuf:"bytes,6,opt,name=property_guid,json=propertyGuid,proto3,oneof" json:"property_guid,omitempty"`
	Tag          *structpb.Value `protobuf:"bytes,7,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Package_Property) Reset() {
	*x = Package_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Property) ProtoMessage() {}

func (x *Package_Property) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Property.ProtoReflect.Descriptor instead.
func (*Package_Property) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 11}
}

func (x *Package_Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package_Property) GetPropertyType() string {
	if x != nil {
		return x.PropertyType
	}
	return ""
}

func (x *Package_Property) GetTagData() *structpb.Value {
	if x != nil {
		return x.TagData
	}
	return nil
}

func (x *Package_Property) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Package_Property) GetArrayIndex() int64 {
	if x != nil {
		return x.ArrayIndex
	}
	return 0
}

func (x *Package_Property) GetPropertyGuid() *Package_Guid {
	if x != nil {
		return x.PropertyGuid
	}
	return nil
}

func (x *Package_Property) GetTag() *structpb.Value {
	if x != nil {
		return x.Tag
	}
	return nil
}

type Package_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties []*Package_Property `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
	Data       *structpb.Value     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Package_Data) Reset() {
	*x = Package_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Data) ProtoMessage() {}

func (x *Package_Data) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Data.ProtoReflect.Descriptor instead.
func (*Package_Data) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 12}
}

func (x *Package_Data) GetProperties() []*Package_Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Package_Data) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type Package_Export struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Export *Package_ExportInfo `protobuf:"bytes,1,opt,name=export,proto3" json:"export,omitempty"`
	Data   *Package_Data       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Package_Export) Reset() {
	*x = Package_Export{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_translate_proto_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package_Export) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_Export) ProtoMessage() {}

func (x *Package_Export) ProtoReflect() protoreflect.Message {
	mi := &file_internal_translate_proto_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_Export.ProtoReflect.Descriptor instead.
func (*Package_Export) Descriptor() ([]byte, []int) {
	return file_internal_translate_proto_proto_rawDescGZIP(), []int{1, 13}
}

func (x *Package_Export) GetExport() *Package_ExportInfo {
	if x != nil {
		return x.Export
	}
	return nil
}

func (x *Package_Export) GetData() *Package_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_internal_translate_proto_proto protoreflect.FileDescriptor

var file_internal_translate_proto_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x8d, 0x2a, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a,
	0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xa4, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x68, 0x61, 0x5f, 0x31, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x31, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x45, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x1a,
	0x3e, 0x0a, 0x04, 0x47, 0x75, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01,
	0x63, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x64, 0x1a,
	0x4e, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x84, 0x01, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0x85, 0x01, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x6f, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x61, 0x73, 0x65,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x1a, 0xd7,
	0x01, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0xf9, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x0e, 0x6e, 0x6f, 0x72, 0x6d,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x4a, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x1a, 0x73, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0xd4, 0x01, 0x0a, 0x06, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x1a, 0xcb, 0x08, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x39, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x46, 0x6f,
	0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x52, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x47,
	0x0a, 0x21, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6e, 0x6f, 0x74, 0x41, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x65, 0x0a, 0x2f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x2c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x57, 0x0a, 0x28, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x25, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x28, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x94,
	0x0f, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x75, 0x65, 0x5f, 0x33, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x55, 0x65, 0x33, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x65, 0x5f, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x65, 0x34, 0x12, 0x3a, 0x0a, 0x1a, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x65, 0x5f, 0x75, 0x65, 0x5f, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x66,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x65, 0x55, 0x65, 0x34, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x67, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a,
	0x17, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x75,
	0x69, 0x64, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x17, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x73, 0x61, 0x76, 0x65, 0x64, 0x42, 0x79, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x1e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6f, 0x6b, 0x12, 0x3b, 0x0a,
	0x1a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x75,
	0x6c, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x62, 0x75, 0x6c, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x3c, 0x0a, 0x1b, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a,
	0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49,
	0x64, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19,
	0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x07,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xaa, 0x02, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x74,
	0x61, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x47,
	0x75, 0x69, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47,
	0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x1a, 0x6f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x6c, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a,
	0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_internal_translate_proto_proto_rawDescOnce sync.Once
	file_internal_translate_proto_proto_rawDescData = file_internal_translate_proto_proto_rawDesc
)

func file_internal_translate_proto_proto_rawDescGZIP() []byte {
	file_internal_translate_proto_proto_rawDescOnce.Do(func() {
		file_internal_translate_proto_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_translate_proto_proto_rawDescData)
	})
	return file_internal_translate_proto_proto_rawDescData
}

var file_internal_translate_proto_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_internal_translate_proto_proto_goTypes = []interface{}{
	(*Data)(nil),                 // 0: translate.Data
	(*Package)(nil),              // 1: translate.Package
	(*Package_Record)(nil),       // 2: translate.Package.Record
	(*Package_Guid)(nil),         // 3: translate.Package.Guid
	(*Package_Generation)(nil),   // 4: translate.Package.Generation
	(*Package_Version)(nil),      // 5: translate.Package.Version
	(*Package_Name)(nil),         // 6: translate.Package.Name
	(*Package_Reference)(nil),    // 7: translate.Package.Reference
	(*Package_Index)(nil),        // 8: translate.Package.Index
	(*Package_PackageIndex)(nil), // 9: translate.Package.PackageIndex
	(*Package_Import)(nil),       // 10: translate.Package.Import
	(*Package_ExportInfo)(nil),   // 11: translate.Package.ExportInfo
	(*Package_Summary)(nil),      // 12: translate.Package.Summary
	(*Package_Property)(nil),     // 13: translate.Package.Property
	(*Package_Data)(nil),         // 14: translate.Package.Data
	(*Package_Export)(nil),       // 15: translate.Package.Export
	(*structpb.Value)(nil),       // 16: google.protobuf.Value
}
var file_internal_translate_proto_proto_depIdxs = []int32{
	1,  // 0: translate.Data.packages:type_name -> translate.Package
	2,  // 1: translate.Package.export_record:type_name -> translate.Package.Record
	12, // 2: translate.Package.summary:type_name -> translate.Package.Summary
	15, // 3: translate.Package.exports:type_name -> translate.Package.Export
	16, // 4: translate.Package.Record.compression_blocks:type_name -> google.protobuf.Value
	9,  // 5: translate.Package.Reference.outer_package:type_name -> translate.Package.PackageIndex
	7,  // 6: translate.Package.Index.norm_reference:type_name -> translate.Package.Reference
	11, // 7: translate.Package.Index.object_reference:type_name -> translate.Package.ExportInfo
	16, // 8: translate.Package.Index.reference:type_name -> google.protobuf.Value
	7,  // 9: translate.Package.PackageIndex.reference:type_name -> translate.Package.Reference
	9,  // 10: translate.Package.Import.outer_package:type_name -> translate.Package.PackageIndex
	8,  // 11: translate.Package.ExportInfo.class_index:type_name -> translate.Package.Index
	8,  // 12: translate.Package.ExportInfo.super_index:type_name -> translate.Package.Index
	8,  // 13: translate.Package.ExportInfo.template_index:type_name -> translate.Package.Index
	8,  // 14: translate.Package.ExportInfo.outer_index:type_name -> translate.Package.Index
	3,  // 15: translate.Package.ExportInfo.package_guid:type_name -> translate.Package.Guid
	2,  // 16: translate.Package.Summary.record:type_name -> translate.Package.Record
	3,  // 17: translate.Package.Summary.guid:type_name -> translate.Package.Guid
	4,  // 18: translate.Package.Summary.generations:type_name -> translate.Package.Generation
	5,  // 19: translate.Package.Summary.saved_by_engine_version:type_name -> translate.Package.Version
	5,  // 20: translate.Package.Summary.compatible_with_engine_version:type_name -> translate.Package.Version
	16, // 21: translate.Package.Summary.compressed_chunks:type_name -> google.protobuf.Value
	16, // 22: translate.Package.Summary.additional_packages_to_cook:type_name -> google.protobuf.Value
	16, // 23: translate.Package.Summary.chunk_ids:type_name -> google.protobuf.Value
	6,  // 24: translate.Package.Summary.names:type_name -> translate.Package.Name
	10, // 25: translate.Package.Summary.imports:type_name -> translate.Package.Import
	11, // 26: translate.Package.Summary.exports:type_name -> translate.Package.ExportInfo
	16, // 27: translate.Package.Property.tag_data:type_name -> google.protobuf.Value
	3,  // 28: translate.Package.Property.property_guid:type_name -> translate.Package.Guid
	16, // 29: translate.Package.Property.tag:type_name -> google.protobuf.Value
	13, // 30: translate.Package.Data.properties:type_name -> translate.Package.Property
	16, // 31: translate.Package.Data.data:type_name -> google.protobuf.Value
	11, // 32: translate.Package.Export.export:type_name -> translate.Package.ExportInfo
	14, // 33: translate.Package.Export.data:type_name -> translate.Package.Data
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_internal_translate_proto_proto_init() }
func file_internal_translate_proto_proto_init() {
	if File_internal_translate_proto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_translate_proto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Guid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Generation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_PackageIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Import); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_ExportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_translate_proto_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package_Export); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_translate_proto_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Package_Index_NormReference)(nil),
		(*Package_Index_ObjectReference)(nil),
		(*Package_Index_Reference)(nil),
	}
	file_internal_translate_proto_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_internal_translate_proto_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_translate_proto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_translate_proto_proto_goTypes,
		DependencyIndexes: file_internal_translate_proto_proto_depIdxs,
		MessageInfos:      file_internal_translate_proto_proto_msgTypes,
	}.Build()
	File_internal_translate_proto_proto = out.File
	file_internal_translate_proto_proto_rawDesc = nil
	file_internal_translate_proto_proto_goTypes = nil
	file_internal_translate_proto_proto_depIdxs = nil
}
